<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>hungry.dev</title><description>Personal blog about iOS development.</description><link>https://hungry.dev</link><language>en</language><lastBuildDate>Mon, 27 Jan 2020 00:25:08 +0100</lastBuildDate><pubDate>Mon, 27 Jan 2020 00:25:08 +0100</pubDate><ttl>250</ttl><atom:link href="https://hungry.dev/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://hungry.dev/posts/2019/how-to-use-swiftui-view-as-a-uiviewcontroller</guid><title>How to use SwiftUI View as a UIViewController</title><description></description><link>https://hungry.dev/posts/2019/how-to-use-swiftui-view-as-a-uiviewcontroller</link><pubDate>Mon, 27 Jan 2020 00:25:07 +0100</pubDate><content:encoded><![CDATA[<h1>How to use SwiftUI View as a UIViewController</h1><p>There is no direct way of using SwiftUI <code>View</code> as a <code>UIViewController</code>, nor is there a direct way to use <code>UIViewController</code> as a SwiftUI <code>View</code>. To make former possible, Apple provides us <code>UIHostingController</code> which acts as container <code>UIViewController</code> for the SwiftUI <code>View</code>.</p><h2>Example</h2><p>Here we have a SwiftUI <code>View</code> we want to use as <code>UIViewController</code>: <code>HungryView</code>. It looks like this:</p><pre><code class="language-swift">struct HungryView : View {
    var body: some View {
        Text("Need food")
    }
}
</code></pre><p>In order to expose <code>HungryView</code> to <code>UIKit</code>, we wrap it in a <code>UIHostingController</code> like this:</p><pre><code class="language-swift">import SwiftUI

final class HungryHostingController : UIHostingController&lt;HungryView&gt; {

}
</code></pre><p>Subclassing <code>UIHostingController</code> with <code>Content</code> type of <code>HungryView</code> is enough to wrap <code>HungryView</code> into a <code>UIViewController</code>.</p><p>Now we can create a <code>HungryHostingController</code> object with an instance of <code>HungryView</code> and use it as any normal <code>UIViewController</code>. In this example we push it on a navigation stack like this:</p><pre><code class="language-swift">let hungryView = HungryView()
let hungryHostingController = HungryHostingController(rootView: hungryView)

navigationController.pushViewController(hungryHostingController, animated: true)
</code></pre><p>And that's all it takes to use your shiny new SwiftUI <code>View</code> like an oldfashined <code>UIViewController</code>.</p>]]></content:encoded></item></channel></rss>